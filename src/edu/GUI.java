/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu;

import cecs429.documents.JsonFileDocument;
import cecs429.index.Posting;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import static edu.DocumentIndexer.corpus;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.nio.file.Path;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author dayanarios
 */
public class GUI extends javax.swing.JFrame {
    private JFrame frame; 
    private static Path directoryPath; 
    private Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
    private int xCoord = dim.width/2; 
    private int yCoord = dim.height/2;
    String indexingMsg = "Indexing Corpus";
    protected static DefaultListModel JListModel = new DefaultListModel();; 

    /**
     * Creates new form GUI
     */
    public GUI() {
        
        initComponents();
        this.setLocation(xCoord-this.getSize().width/2,yCoord-this.getSize().height/2);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DirectoryDialogBox = new javax.swing.JDialog();
        SearchDirectoriesButton = new javax.swing.JButton();
        DirectoryDirectionsLabel = new javax.swing.JLabel();
        indexingCorpusMessage = new javax.swing.JOptionPane();
        directoryChooser = new javax.swing.JFileChooser();
        docFrame = new javax.swing.JFrame();
        docBodyScrollPane = new javax.swing.JScrollPane();
        docBodyLabel = new javax.swing.JLabel();
        docTitleScrollPane = new javax.swing.JScrollPane();
        docTitleLabel = new javax.swing.JLabel();
        ProjectTitleLabel = new javax.swing.JLabel();
        SearchBarTextField = new javax.swing.JTextField();
        ResultsScrollPane = new javax.swing.JScrollPane();
        //JListModel.addElement("Search Results");
        ResultsJList = new javax.swing.JList<>(JListModel);
        ResultsLabel = new javax.swing.JLabel();

        DirectoryDialogBox.setTitle("Select Directory");
        DirectoryDialogBox.setSize(new java.awt.Dimension(400, 246));

        SearchDirectoriesButton.setBackground(new java.awt.Color(0, 102, 204));
        SearchDirectoriesButton.setText("Directories");
        SearchDirectoriesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchDirectoriesButtonActionPerformed(evt);
            }
        });

        DirectoryDirectionsLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        DirectoryDirectionsLabel.setText("Please select a directory to index. ");

        DirectoryDialogBox.setLocation(xCoord-DirectoryDialogBox.getSize().width/2, yCoord-DirectoryDialogBox.getSize().height/2);
        DirectoryDialogBox.setVisible(true);

        javax.swing.GroupLayout DirectoryDialogBoxLayout = new javax.swing.GroupLayout(DirectoryDialogBox.getContentPane());
        DirectoryDialogBox.getContentPane().setLayout(DirectoryDialogBoxLayout);
        DirectoryDialogBoxLayout.setHorizontalGroup(
            DirectoryDialogBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DirectoryDialogBoxLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(SearchDirectoriesButton)
                .addGap(147, 147, 147))
            .addGroup(DirectoryDialogBoxLayout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(DirectoryDirectionsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(80, Short.MAX_VALUE))
        );
        DirectoryDialogBoxLayout.setVerticalGroup(
            DirectoryDialogBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DirectoryDialogBoxLayout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(DirectoryDirectionsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(SearchDirectoriesButton)
                .addGap(78, 78, 78))
        );

        indexingCorpusMessage.setVisible(false);
        indexingCorpusMessage.setLocation(xCoord-indexingCorpusMessage.getSize().width/2, yCoord-indexingCorpusMessage.getSize().height/2);

        docFrame.setVisible(false);
        docFrame.setMaximumSize(new java.awt.Dimension(550, 528));
        docFrame.setMinimumSize(new java.awt.Dimension(550, 528));
        docFrame.setSize(new java.awt.Dimension(550, 528));
        docFrame.setLocation(xCoord-docFrame.getSize().width/2, yCoord-docFrame.getSize().height/2);

        docBodyScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        docBodyScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        docBodyScrollPane.setMaximumSize(new java.awt.Dimension(32767, 30));
        docBodyScrollPane.setMinimumSize(new java.awt.Dimension(450, 30));
        docBodyScrollPane.setPreferredSize(new java.awt.Dimension(469, 5000));

        docBodyLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        docBodyLabel.setMinimumSize(new java.awt.Dimension(450, 2000));
        docBodyLabel.setPreferredSize(new java.awt.Dimension(450, 5000));
        docBodyScrollPane.setViewportView(docBodyLabel);

        docTitleScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        docTitleScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        docTitleScrollPane.setMinimumSize(new java.awt.Dimension(450, 28));
        docTitleScrollPane.setPreferredSize(new java.awt.Dimension(450, 28));

        docTitleLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        docTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        docTitleLabel.setMaximumSize(new java.awt.Dimension(700, 30));
        docTitleLabel.setMinimumSize(new java.awt.Dimension(450, 30));
        docTitleLabel.setPreferredSize(new java.awt.Dimension(700, 30));
        docTitleScrollPane.setViewportView(docTitleLabel);

        javax.swing.GroupLayout docFrameLayout = new javax.swing.GroupLayout(docFrame.getContentPane());
        docFrame.getContentPane().setLayout(docFrameLayout);
        docFrameLayout.setHorizontalGroup(
            docFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, docFrameLayout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addComponent(docBodyScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
            .addGroup(docFrameLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(docTitleScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        docFrameLayout.setVerticalGroup(
            docFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(docFrameLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(docTitleScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(docBodyScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(637, 469));

        ProjectTitleLabel.setFont(new java.awt.Font("Gujarati Sangam MN", 0, 24)); // NOI18N
        ProjectTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ProjectTitleLabel.setText("Positional Inverted Search Engine");
        ProjectTitleLabel.setMaximumSize(new java.awt.Dimension(147, 28));
        ProjectTitleLabel.setMinimumSize(new java.awt.Dimension(147, 24));
        ProjectTitleLabel.setPreferredSize(new java.awt.Dimension(147, 28));
        ProjectTitleLabel.setRequestFocusEnabled(false);
        ProjectTitleLabel.setSize(new java.awt.Dimension(147, 28));

        SearchBarTextField.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        SearchBarTextField.setText("Enter a term to search");
        SearchBarTextField.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        SearchBarTextField.setMaximumSize(new java.awt.Dimension(147, 22));
        SearchBarTextField.setMinimumSize(new java.awt.Dimension(147, 22));
        SearchBarTextField.setSize(new java.awt.Dimension(147, 22));
        SearchBarTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBarTextFieldActionPerformed(evt);
            }
        });

        ResultsJList.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ResultsJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ResultsJList.setToolTipText("Displays results of search query");
        ResultsJList.setMaximumSize(new java.awt.Dimension(147, 32767));
        ResultsJList.setMinimumSize(new java.awt.Dimension(147, 206));
        ResultsJList.setPreferredSize(new java.awt.Dimension(147, 32767));
        ResultsJList.setSize(new java.awt.Dimension(147, 32767));
        ResultsJList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ResultsJListMouseClicked(evt);
            }
        });
        ResultsScrollPane.setViewportView(ResultsJList);

        ResultsLabel.setBackground(new java.awt.Color(255, 255, 255));
        ResultsLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        ResultsLabel.setText("Search Results");
        ResultsLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ResultsLabel.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ResultsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
                    .addComponent(SearchBarTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ProjectTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
                    .addComponent(ResultsScrollPane))
                .addContainerGap(91, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(ProjectTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(SearchBarTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(ResultsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(ResultsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SearchDirectoriesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchDirectoriesButtonActionPerformed
        // TODO add your handling code here:
        directoryChooser = new JFileChooser(); 
        directoryChooser.setCurrentDirectory(new java.io.File("~")); //starts at root directory
        directoryChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        directoryChooser.setAcceptAllFileFilterUsed(false);
        
        if (directoryChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) 
        { 
           DirectoryDialogBox.dispose();
           JOptionPane.showOptionDialog(indexingCorpusMessage, "Indexing corpus please wait", "Indexing Corpus", javax.swing.JOptionPane.DEFAULT_OPTION, javax.swing.JOptionPane.INFORMATION_MESSAGE, null, null ,null);
           this.setVisible(true);
           File file = directoryChooser.getSelectedFile(); 
           directoryPath = file.toPath(); 
           
           //starts indexing 
           
            try {
                
                DocumentIndexer.startIndexing(directoryPath);
                
            } catch (Exception ex) {
                System.out.println("Problem with DocumentIndexer.startIndexing(directoryPath)"); 
            }
            
          
        }
        else 
        {
          System.out.println("No Selection ");
        }
        
        
        
    }//GEN-LAST:event_SearchDirectoriesButtonActionPerformed

    private void SearchBarTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBarTextFieldActionPerformed
        
            // TODO add your handling code here:
            DocumentIndexer.query = SearchBarTextField.getText();
        try {   
            if(!DocumentIndexer.newCorpus())
            {
                
                DocumentIndexer.startSearchEngine();
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_SearchBarTextFieldActionPerformed

    private void ResultsJListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ResultsJListMouseClicked
        
        if(DocumentIndexer.clickList)
        {
            // TODO add your handling code here:
            javax.swing.JList list = (javax.swing.JList) evt.getSource();
            if (evt.getClickCount() == 2) {
                int index = list.locationToIndex(evt.getPoint());
                
                docFrame.setVisible(true);

                try {

                    docTitleLabel.setText(DocumentIndexer.corpus.getDocument(DocumentIndexer.postings.get(index).getDocumentId()).getTitle()); //gets Document relating to docID
                    BufferedReader reader = new BufferedReader(DocumentIndexer.corpus.getDocument(DocumentIndexer.postings.get(index).getDocumentId()).getContent());
                    //Reader reader = DocumentIndexer.corpus.getDocument(DocumentIndexer.postings.get(index).getDocumentId()).getContent();

                    //read the contents of the json file to display them
                    String contents = "<html>";
                    String line;
                    while ((line = reader.readLine()) != null) {
                        contents += line;
                    }
                    contents += "</html>";

                    docBodyLabel.setText(contents);
                } catch (ArrayIndexOutOfBoundsException ex) {
                    System.out.println("Array index out of bounds exception");
                } catch (IOException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                
                
            }
        }
        
        SearchBarTextField.selectAll();
        
    }//GEN-LAST:event_ResultsJListMouseClicked

    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }

        try{

        javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        }
        catch (Exception ex){}
        //</editor-fold>
    
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(false);
                
            }
        });
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JDialog DirectoryDialogBox;
    private javax.swing.JLabel DirectoryDirectionsLabel;
    private javax.swing.JLabel ProjectTitleLabel;
    protected static javax.swing.JList<String> ResultsJList;
    protected static javax.swing.JLabel ResultsLabel;
    private javax.swing.JScrollPane ResultsScrollPane;
    protected static javax.swing.JTextField SearchBarTextField;
    private javax.swing.JButton SearchDirectoriesButton;
    private javax.swing.JFileChooser directoryChooser;
    private javax.swing.JLabel docBodyLabel;
    private javax.swing.JScrollPane docBodyScrollPane;
    private javax.swing.JFrame docFrame;
    protected static javax.swing.JLabel docTitleLabel;
    private javax.swing.JScrollPane docTitleScrollPane;
    protected static javax.swing.JOptionPane indexingCorpusMessage;
    // End of variables declaration//GEN-END:variables
}
